{"version":3,"sources":["components/Loader/Loader.tsx","utils/fetchClient.ts","api/mate.ts","components/NewCommentForm.tsx","components/CommentsList/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/PostsList.tsx","components/Main/Main.tsx","App.tsx","index.tsx"],"names":["Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getPostsOfUser","userId","getCommentsToPost","postId","deleteComment","commentId","NewCommentForm","addComment","useState","name","setName","email","setEmail","setBody","isSubmitError","setIsSubmitError","isLoading","setIsLoading","useEffect","savedName","localStorage","getItem","savedEmail","addPostOnServer","useCallback","newComment","a","result","setItem","onSubmit","event","preventDefault","onReset","htmlFor","type","id","placeholder","classNames","value","onChange","target","CommentsList","comments","removeCommentById","map","href","onClick","PostDetails","selectedPost","title","setComments","showError","setShowError","showNewCommentForm","setShowNewCommentForm","getCommentsFromServer","commentToDelete","find","comment","index","indexOf","prev","filter","commnet","copy","splice","length","UserSelector","selectedUser","setSelectedUser","users","setUsers","isOpend","setIsOpend","getUsersFromServer","onBlur","role","user","onMouseDown","handleSelectUser","PostsList","posts","setSelectedPost","post","isSelected","changeTo","handleSelectPost","Main","setPosts","getPostsFromServer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f825b39.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Omit<T, 'id'>) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: Partial<T>) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPostsOfUser = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getCommentsToPost = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { createComment } from '../api/mate';\n\ninterface Props {\n  postId: number;\n  addComment: (comment: Comment) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isSubmitError, setIsSubmitError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const savedName = localStorage.getItem('name');\n    const savedEmail = localStorage.getItem('email');\n\n    if (savedName) {\n      setName(savedName);\n    }\n\n    if (savedEmail) {\n      setEmail(savedEmail);\n    }\n  }, []);\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsSubmitError(false);\n  };\n\n  const addPostOnServer = useCallback(\n    async (newComment: Omit<Comment, 'id'>) => {\n      setIsLoading(true);\n      setIsSubmitError(false);\n      try {\n        const result = await createComment(newComment);\n\n        localStorage.setItem('name', result.name);\n        localStorage.setItem('email', result.email);\n        addComment(result);\n        setBody('');\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [],\n  );\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (email && name && body) {\n      addPostOnServer({\n        postId,\n        name,\n        email,\n        body,\n      });\n    } else {\n      setIsSubmitError(true);\n    }\n  };\n\n  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  const handleChangeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const handleChangeBody = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isSubmitError && !name },\n            )}\n            value={name}\n            onChange={handleChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isSubmitError && !name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isSubmitError && !name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isSubmitError && !email },\n            )}\n            value={email}\n            onChange={handleChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isSubmitError && !email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isSubmitError && !email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isSubmitError && !body },\n            )}\n            value={body}\n            onChange={handleChangeBody}\n          />\n        </div>\n\n        {isSubmitError && !body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../../types/Comment';\n\ninterface Props {\n  comments: Comment[];\n  removeCommentById: (commentId: number) => void;\n}\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  removeCommentById,\n}) => {\n  const handleDeleteComment = (commentId: number) => {\n    removeCommentById(commentId);\n  };\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(({\n        id,\n        name,\n        email,\n        body,\n      }) => (\n        <article className=\"message is-small\" data-cy=\"Comment\">\n          <div className=\"message-header\">\n            <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n              {name}\n            </a>\n\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => handleDeleteComment(id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\nimport { deleteComment, getCommentsToPost } from '../api/mate';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  selectedPost: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const {\n    id,\n    title,\n    body,\n  } = selectedPost;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [showNewCommentForm, setShowNewCommentForm] = useState(false);\n\n  const getCommentsFromServer = useCallback(async (postId: number) => {\n    setIsLoading(true);\n    setShowError(false);\n    try {\n      const result = await getCommentsToPost(postId);\n\n      setComments(result);\n    } catch {\n      setShowError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const addComment = (comment: Comment) => {\n    setComments(prev => [\n      ...prev,\n      comment,\n    ]);\n  };\n\n  const removeCommentById = async (commentId: number) => {\n    const commentToDelete = comments.find(comment => comment.id === commentId);\n    const index = commentToDelete ? comments.indexOf(commentToDelete) : -1;\n\n    setComments(prev => prev.filter(commnet => commnet.id !== commentId));\n    try {\n      await deleteComment(commentId);\n    } catch {\n      setShowError(true);\n\n      if (commentToDelete) {\n        setComments(prev => {\n          const copy = [...prev];\n\n          copy.splice(index, 0, commentToDelete);\n\n          return copy;\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    getCommentsFromServer(id);\n    setShowNewCommentForm(false);\n  }, [id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {showError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoading && !showError && (comments.length\n            ? (\n              <CommentsList\n                comments={comments}\n                removeCommentById={removeCommentById}\n              />\n            )\n            : (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n          )}\n\n          {!isLoading && !showError && !showNewCommentForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setShowNewCommentForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n\n        {showNewCommentForm && (\n          <NewCommentForm\n            addComment={addComment}\n            postId={id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { getUsers } from '../api/mate';\n\ninterface Props {\n  selectedUser: User | null;\n  setSelectedUser: (user: User | null) => void;\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isOpend, setIsOpend] = useState(false);\n\n  const getUsersFromServer = useCallback(async () => {\n    const result = await getUsers();\n\n    setUsers(result);\n  }, []);\n\n  const handleToggleSelect = () => {\n    setIsOpend(prev => !prev);\n  };\n\n  const handleSelectUser = (user: User) => {\n    setSelectedUser(user);\n    setIsOpend(false);\n  };\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isOpend },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleToggleSelect}\n          onBlur={() => setIsOpend(false)}\n        >\n          <span>\n            {\n              selectedUser\n                ? selectedUser.name\n                : 'Choose a user'\n            }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              onMouseDown={() => {\n                handleSelectUser(user);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  if (!posts.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  const handleSelectPost = (post: Post) => {\n    const changeTo = post.id === selectedPost?.id\n      ? null\n      : post;\n\n    setSelectedPost(changeTo);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          {posts.map(post => {\n            const { title, id } = post;\n            const isSelected = post.id === selectedPost?.id;\n\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': !isSelected },\n                    )}\n                    onClick={() => handleSelectPost(post)}\n                  >\n                    { isSelected ? 'Close' : 'Open' }\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { getPostsOfUser } from '../../api/mate';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { PostsList } from '../PostsList';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedUser: User;\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n}\n\nexport const Main: React.FC<Props> = ({\n  selectedUser,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  const getPostsFromServer = useCallback(async (userId) => {\n    setIsLoading(true);\n    setShowError(false);\n    try {\n      const result = await getPostsOfUser(userId);\n\n      setPosts(result);\n    } catch {\n      setShowError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      getPostsFromServer(selectedUser.id);\n    }\n  }, [selectedUser]);\n\n  return (\n    <div className=\"block\" data-cy=\"MainContent\">\n\n      {showError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          Something went wrong!\n        </div>\n      )}\n\n      {isLoading && <Loader />}\n\n      {!isLoading && !showError && (\n        <PostsList\n          posts={posts}\n          selectedPost={selectedPost}\n          setSelectedPost={setSelectedPost}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Main } from './components/Main';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    setSelectedPost(null);\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n              {selectedUser\n                ? (\n                  <Main\n                    selectedUser={selectedUser}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )\n                : (\n                  <div className=\"block\" data-cy=\"MainContent\">\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  </div>\n                )}\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails selectedPost={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}